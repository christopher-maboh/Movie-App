{"version":3,"sources":["components/Movie.js","App.js","reportWebVitals.js","index.js"],"names":["IMG_API","Movie","vote","title","poster_path","overview","vote_average","className","src","alt","App","useState","movies","setMovies","searchTerm","setSearchTerm","useEffect","getMovies","API","fetch","then","res","json","data","results","onSubmit","e","preventDefault","type","placeholder","value","onChange","target","length","map","movie","id","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8MACMA,EAAU,mCA0BDC,EAhBD,SAAC,GAAD,IATOC,EASLC,EAAF,EAAEA,MAAOC,EAAT,EAASA,YAAaC,EAAtB,EAAsBA,SAAUC,EAAhC,EAAgCA,aAAhC,OACV,sBAAKC,UAAW,QAAhB,UACJ,qBAAKC,IAAeR,EAAUI,EAAuJK,IAAON,IAC5L,sBAAKI,UAAW,aAAhB,UACI,6BAAKJ,IACL,sBAAMI,UAAS,eAdEL,EAcoBI,EAbjCJ,GAAM,EACC,QACDA,GAAO,EACN,SAEA,QAQX,SACKI,OAIT,sBAAKC,UAAU,aAAf,UACI,2CACA,4BAAIF,WCiCOK,MAhDf,WACE,MAA4BC,mBAAS,IAArC,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAAoCF,mBAAS,IAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KACAC,qBAAU,WACVC,EATmB,yHAWlB,IAED,IAAMA,EAAY,SAACC,GACjBC,MAAMD,GACLE,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACXV,EAAUU,EAAKC,aAeb,OACE,qCACG,iCACE,sBAAMC,SAdS,SAACC,GACrBA,EAAEC,iBACHb,IACDG,EAtBiB,6FAsBMH,GAErBC,EAAc,MAST,SACA,uBAAOR,UAAU,SACjBqB,KAAK,SACLC,YAAY,YACZC,MAAQhB,EACRiB,SAXgB,SAACL,GACtBX,EAAcW,EAAEM,OAAOF,cAcpB,qBAAKvB,UAAU,kBAAf,SACCK,EAAOqB,OAAS,GAAKrB,EAAOsB,KAAI,SAACC,GAAD,OAC/B,cAAC,EAAD,eAAyBA,GAAbA,EAAMC,aCrCZC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBnB,MAAK,YAAkD,IAA/CoB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.f75f7ff0.chunk.js","sourcesContent":["import React from 'react';\r\nconst IMG_API = \"https://image.tmdb.org/t/p/w1280\"\r\nconst setVoteClass= (vote) => {\r\n    if (vote>=8){\r\n        return \"green\";\r\n    }else if (vote >=6){\r\n        return \"orange\";\r\n    }else{\r\n        return \"red\"\r\n    }\r\n}\r\nconst Movie = ({title, poster_path, overview, vote_average}) => (\r\n    <div className= \"movie\">\r\n<img src={IMG_API ? IMG_API + poster_path : \"http://images.unsplash.com/photo-1485846234645-a62644f84728?ixlib=rb-1.2.1&ixid=eyjhcHBfawQiojEyMDd9&auto=format&fit=crop&w=1480&q=80\"} alt = {title} />\r\n<div className= \"movie-info\">\r\n    <h3>{title}</h3>\r\n    <span className={`tag ${setVoteClass(vote_average)}`}>\r\n        {vote_average}\r\n    </span>\r\n\r\n</div>\r\n<div className=\"movie-over\">\r\n    <h2>overview:</h2>\r\n    <p>{overview}</p>\r\n</div>\r\n    </div>\r\n);\r\nexport default Movie;","import React, { useEffect, useState } from \"react\"\nimport Movie from './components/Movie';\n\nconst FEATURED_API = \"https://api.themoviedb.org/3/discover/movie?sort_by=popularity.desc&api_key=591bc14cb04fdbe715372987489b0325&page=1\"\n\nconst SEARCH_API = \"https://api.themoviedb.org/3/search/movie?&api_key=591bc14cb04fdbe715372987489b0325&query=\"\n\n\nfunction App() {\n  const [movies, setMovies] = useState([]);\n  const [searchTerm, setSearchTerm] = useState('');\n  useEffect(() => {\n  getMovies(FEATURED_API)\n  \n}, [])\n\n  const getMovies = (API) =>{\n    fetch(API)\n    .then((res) => res.json())\n    .then((data) => {\nsetMovies(data.results);\n    });\n  }\n\n  const handleOnSubmit =(e) => {\n    e.preventDefault();\nif(searchTerm){\n  getMovies(SEARCH_API + searchTerm);\n  \n    setSearchTerm('')\n  }\n};\n  const handleOnChange = (e) => {\n    setSearchTerm(e.target.value);\n  }\n  return(\n    <>\n       <header>\n         <form onSubmit={handleOnSubmit}>\n         <input className=\"search\"\n         type=\"search\" \n         placeholder=\"search...\"\n         value ={searchTerm}\n         onChange={handleOnChange}\n         />\n         </form>\n       </header>\n       <div className=\"movie-container\">\n       {movies.length > 0 && movies.map((movie) => \n         <Movie key={movie.id}{...movie} />\n       )}\n     </div>\n     </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}